library(usethis)
use_r("fars_functions")
library(roxygen2)
install.packages(c("dplyr", "maps", "readr", "tidyr"))
use_test('fars_functions')
use_mit_license("David Haycraft")
use_package("dplyr")
use_package("readr")
use_package("tidyr")
use_package("graphics")
use_package(",a[s")
use_package("maps")
?use_vignette
use_git()
use_github()
?use_package_doc
install.packages("covr")
test_coverage()
test_coverage()
?test_coverage
library(covr)
test_coverage
document()
library(roxygen2)
document()
?document
devtools::document()
?file.exists
devtools::use_data_raw
#' Read file in from CSV
#'
#' Reads in a CSV from a file location as tbl_df
#' @param filename file path as character string.
#'
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
fars_read('inst/extdata/data/accident_2013.csv.bz2')
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
fars_read("accident_2013.csv.bz2")
make_filename(2013)
make_filename("2013")
?sprintf
sprintf("%f", pi)
#' Create File name and Read Fars Data
#'
#' Takes either a number or a string that is the year with no spaces to create a file name for a FARS CSV to read in the data
#' @param year string or numeric that indicates the year of the FARS data that the file name will be created to read.
#' @return a string that is the file name to be used in fars_read for the input year
#' @examples
#' make_filename(2013)
#' @note Warning: Will not work if year is not 2013, 2014, or 2015 as those are the only years with data files
#' @export
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years("2013:2014")
fars_read_years(2013:2014)
fars_read_years("2013")
fars_read_years(2013)
#' Create File Name FARS Dataset
#'
#' Takes either a number or a string that is the year with no spaces to create a file name for a FARS CSV to read in the data
#' @param year string or numeric that indicates the year of the FARS data that the file name will be created to read.
#' @return a string that is the file name to be used in fars_read for the input year
#' @examples
#' make_filename(2013)
#' @note Warning: Will not work if year is not 2013, 2014, or 2015 as those are the only years with data files
#' @export
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
p1 <- make_filename()
p1 <- make_filename(2013)
fars_read(p1)
library(dplyr)
fars_read_years(2013)
fars_read_years(2013:2015)
fars_read_years(c(2013, "2015"))
dat_list <- fars_read_years(years)
#' Summarises FARS data for multiple years
#'
#' Reads in a list of years and extracts the year and month for each row from the files for each year associated
#' @param years string or numeric that indicates the year of the FARS data that the file name will be created to read.
#' @return a string that is the file name to be used in fars_read for the input year
#' @examples
#' make_filename(2013)
#' @note Warning: Will not work if year is not 2013, 2014, or 2015 as those are the only years with data files
#' @export
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
library(tidyr)
fars_summarize_years(2013:2014)
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
fars_map_state(14, 2013)
fars_map_state("14", 2013)
fars_read(make_filename("2014")) %>% data.frame()
fars_map_state(1, 2013)
fars_map_state(2, 2013)
fars_map_state(3, 2013)
d1 <- fars_map_state(1, 2013)
d1<-fars_read(make_filename("2014")) %>% data.frame()
head(d1)
table(d1$STATE)
d1 <- fars_map_state(47, 2013)
fars_map_state(47, 2013)
fars_map_state(50), 2013)
fars_map_state(50, 2013)
fars_map_state(50, 2013)
fars_map_state(50, 2013)
fars_map_state(48, 2013)
fars_map_state(48, 2013)
fars_map_state(56, 2013)
fars_map_state(56, 2013)
fars_map_state(56, 2013)
fars_map_state(55, 2013)
fars_map_state(55, 2013)
fars_map_state(53, 2013)
fars_map_state(53, 2013)
fars_map_state(state.num=6, year=2013)
devtools::document()
?tryCatch
devtools::document()
use_readme_md()
git remote add origin git@github.com:dhaycraft/trafficR.git
library(devtools)
use_vignette()
use_vignette("example-fars")
library(trafficR)
fname <-make_filename(2013)
fname
fars_read(fname)
?sprintf
fars_read(sprintf("./%d",fname))
fars_read(sprintf("./%s",fname))
fars_read(sprintf("~/%s",fname))
file.path("~", "traffficR", fname)
file.path("~", "traffficR", fname)
fpath <-file.path("~", "traffficR", fname)
fars_read(fpath)
fpath <-file.path(".", "traffficR", fname)
fpath
path.expand(file.path("~", "trafficR"))
normalizePath(file.path("~", 'trafficR'))
path.expand(file.path("~", "trafficR"))
?file.path
path.expand(file.path(".", "trafficR"))
path.expand(file.path("~", "trafficR"))
path.expand(file.path("~","Repositories" ,"trafficR"))
file.path("~","Repositories" ,"trafficR"))
file.path("~","Repositories" ,"trafficR")
fars_read()
fars_read("fname")
#get filename
fname <-make_filename(2013)
fars_read("fname")
fars_read(fname)
#Get file path to data
fpath<- path.expand(file.path("..", fname))
fpath
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("Rtools")
install.packages("Rtools")
pkgbuild::find_rtools(debug = TRUE)
pkgbuild::has_build_tools()
devtools::document()
fars_summarize_years(2013:2014)
devtools::check()
devtools::check()
devtools::check()
library(trafficR)
library(dplyr)
fpath("..","data",fname)
#get filename
fname <-make_filename(2013)
fname
fpath("..","data",fname)
file.path("..","data",fname)
devtools::check()
?devtools::import
?import
?import
?n()
?n
library(dplyr)
importFrom(magrittr, "%>%")
devtools:importFrom(magrittr, "%>%")
devtools::importFrom(magrittr, "%>%")
library(trafficR)
library(trafficR)
fars_read(2017)
library(testthat)
?expect_error
expect_error(make_filename(2018))
expect_error(fars_read(2018))
make_filename(2018)
fars_read_years(1990:1991)
fars_summarize_years(1990)
fars_map_state(state.num=6, year=1990)
?expect_warning
class(fars_read_years(2013:2015))
class(fars_read_years(2013:2014))
setwd("data")
system("ls")
system("ll")
system("cd")
getwd()
fars_summarize_years(1990)
?expect_error
expect_output
?expect_output
expect_s3_class("hello",character)
make_filename(2013)
expect_is("hello", "character")
install.packages("vdiffr")
library(vdiffr)
fars_map_state(state.num=6, year=2013)
?manage_cases
vdiffr:::vdiffrAddin()
vdiffr:::vdiffrAddin()
getwd()
setwd("C:/Users/haycr/Desktop/Repositories/trafficR")
getwd()
getwd()
getwd()
expect_is(make_filename(2013), character)
?expect_is
getwd()
testthat::test_path()
source('C:/Users/haycr/Desktop/Repositories/trafficR/tests/testthat.R', echo=TRUE)
source('C:/Users/haycr/Desktop/Repositories/trafficR/tests/testthat.R', echo=TRUE)
source('C:/Users/haycr/Desktop/Repositories/trafficR/tests/testthat.R', echo=TRUE)
source('C:/Users/haycr/Desktop/Repositories/trafficR/tests/testthat.R', echo=TRUE)
source('C:/Users/haycr/Desktop/Repositories/trafficR/tests/testthat.R', echo=TRUE)
source('C:/Users/haycr/Desktop/Repositories/trafficR/tests/testthat.R', echo=TRUE)
